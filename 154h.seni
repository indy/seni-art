
(background)
(top-section)
(middle-section)
(lower-section)

(define backgroundColour (col/rgb r: [0.2 (scalar)]
                                  g: [0.2 (scalar)]
                                  b: [0.5 (scalar)]
                                  alpha: 0.9))

(define topColour (col/rgb r: [0.2 (scalar)]
                           g: [0.0 (scalar)]
                           b: [0.1 (scalar)]
                           alpha: 0.9))

(define midColour (col/lab l: [37.0 (scalar min: 0 max: 100)]
                           a: [5.79 (scalar min: -50 max: 50)]
                           b: [-35.82 (scalar min: -50 max: 50)]
                           alpha: 0.7))

(define (top-section-highlights)
  (let ((iterations [5 (int min: 1 max: 30)])
        (overlap [1 (int min: 1 max: 20)])
        (tessellation [35 (int min: 1 max: 50)])
        (strokeNoise [20 (int min: 1 max: 50)])
        (colourVolatility [10 (int min: 0 max: 30)])
        (volatility [10 (int min: 0 max: 30)])
        (strokeTessellation 15)
        (y 750)
        (width 200)
        (height 300)
        (colour (col/set-lab-l colour: topColour
                               value: (+ (col/get-lab-l colour: topColour)
                                         [10.5 (scalar min: 0.0 max: 20.0)]))))

    (strokedBezierRect x: 250
                       y: y
                       width: width
                       height: height
                       iterations: iterations
                       overlap: overlap
                       tessellation: tessellation
                       strokeTessellation: strokeTessellation
                       strokeNoise: strokeNoise
                       colour: colour
                       colourVolatility: colourVolatility
                       volatility: volatility
                       seed: [44 (int)])
    (strokedBezierRect x: 550
                       y: y
                       width: width
                       height: height
                       iterations: iterations
                       overlap: overlap
                       tessellation: tessellation
                       strokeTessellation: strokeTessellation
                       strokeNoise: strokeNoise
                       colour: colour
                       colourVolatility: colourVolatility
                       volatility: volatility
                       seed: [45 (int)])
    (strokedBezierRect x: 850
                       y: y
                       width: width
                       height: height
                       iterations: iterations
                       overlap: overlap
                       tessellation: tessellation
                       strokeTessellation: strokeTessellation
                       strokeNoise: strokeNoise
                       colour: colour
                       colourVolatility: colourVolatility
                       volatility: volatility
                       seed: [46 (int)])))

(define (top-section)
  (strokedBezierRect x: 500
                   y: 750
                   width: 900
                   height: 400
                   iterations: [40 (int min: 1 max: 100)]
                   overlap: [10 (int min: 1 max: 100)]
                   tessellation: [35 (int min: 1 max: 50)]
                   strokeTessellation: 15
                   strokeNoise: [20 (int min: 1 max: 50)]
                   colour: topColour
                   colourVolatility: [10 (int min: 0 max: 30)]
                   volatility: [10 (int min: 0 max: 30)]
                   seed: [44 (int)])
  (top-section-highlights))

(define (middle-section)
  (strokedBezierRect x: 500
                     y: 425
                     width: 900
                     height: 250
                     iterations: [40 (int min: 1 max: 100)]
                     overlap: [10 (int min: 1 max: 100)]
                     tessellation: [35 (int min: 1 max: 50)]
                     strokeTessellation: 15
                     strokeNoise: [20 (int min: 1 max: 50)]
                     colour: midColour
                     colourVolatility: [10 (int min: 0 max: 30)]
                     volatility: [10 (int min: 0 max: 30)]
                     seed: [44 (int)]))

(define (lower-section)
  (let ((colour (col/set-lab-l colour: midColour
                               value: (- (col/get-lab-l
                                          colour: midColour)
                                         [20.5 (scalar min: 0.0 max: 20.0)]))))
    (strokedBezierRect x: 500
                       y: 200
                       width: 900
                       height: 300
                       iterations: [40 (int min: 1 max: 100)]
                       overlap: [10 (int min: 1 max: 100)]
                       tessellation: [35 (int min: 1 max: 50)]
                       strokeTessellation: 15
                       strokeNoise: [20 (int min: 1 max: 50)]
                       colour: colour
                       colourVolatility: [10 (int min: 0 max: 30)]
                       volatility: [10 (int min: 0 max: 30)]
                       seed: [44 (int)])))

(define (background)
  (rect x: 500
        y: 500
        width: 1000
        height: 1000
        colour: backgroundColour)
  (strokedBezierRect x: 500
                     y: 500
                     width: 1000
                     height: 1000
                     iterations: [100 (int min: 1 max: 100)]
                     overlap: [10 (int min: 1 max: 100)]
                     tessellation: [35 (int min: 1 max: 50)]
                     strokeTessellation: 15
                     strokeNoise: [30 (int min: 1 max: 50)]
                     colour: backgroundColour
                     colourVolatility: [20 (int min: 0 max: 30)]
                     volatility: [3 (int min: 0 max: 20)]
                     seed: [44 (int)]))
